/***************
 * cascading style sheet for ThinkRoot99,
 * $Revision: 1.7 $
 ***************************************************************/

@import url('https://fonts.googleapis.com/css?family=Inconsolata');

header, nav, footer {
    border:             2px dashed #333;
    background-color:   #e0e0e0;
    color:              #000000;
    margin:             1em;
    padding:            1em;
}

figcaption:not(.visible) {
    display:            none;
}

figcaption, caption {
    font-size:          small;
    text-align:         center;
}

h1.title {
    margin:             auto;
}

p.author {
    font-size:          x-small;
    margin:             auto;
}

p.author::before {
    content:            "by ";
}

p.date {
    overflow-wrap:      anywhere;
    display:            none;
}

footer {
    text-align:         center;
}

header~* {
    margin:             1em;
    padding:            1em;
}

body {
    max-width:          80em;
    margin:             auto;
    font-family:        "Inconsolata", monospace;
    font-size:          1.1em;
    background-color:   #e0e0e0;
    color:              #000000;
}

h1, h2, h3, h4, h5, h6 {
    font-family:        "Inconsolata", monospace;
    clear:              both;
}

img {
    padding:            2px;
    background-color:   #cfcccc;
    color:              #000;
    height:             12em;
    float:              right;
    clear:              right;
    margin-left:        1em;
    margin-bottom:      1em;
}

/* codeblocks *and* quoted blocks */
blockquote, pre {
    padding:            1em;
    background-color:   #cfcccc;
    color:              #000;
    clear:              both;
    display:            table;
    margin-left:        auto;
    margin-right:       auto;
    padding-top:        0.25em;
    padding-bottom:     0.25em;
}

/* images inside quoted blocks */
blockquote img {
    clear: none;
    height: auto;
    max-height: 32em;
    max-width: 100%;
}

/* If it's just an image, no need to draw two borders */
blockquote > p:only-child > a:only-child > img:only-child {
    border: none;
    padding: 0;
}

/* just codeblocks */
pre, code {
    background-color:   #cfcccc;
    font-family:        "Inconsolata", monospace;
    border-radius:      0.5em;
}

object {
    padding:            2px;
    border:             2px dashed #333;
    background-color:   #5E81AC;
    color:              #000;
    float:              right;
    margin-left:        1em;
    margin-right:       2em;
}

table {
    padding:            2px;
    border-style:       solid;
    border-color:       #000;
    border-collapse:    collapse;
    width:              80%;
    caption-side:       bottom;
}

td {
    border:             1px solid #000;
    text-align:         left;
}

th {
    border:             1px solid #000;
    background-color:   #ccc;
    color:              #000;
    text-align:         left;
}

.noborder, .noborder * {
    border:             none!important;
    padding:            0!important;
}

hr {
    height:             1px;
    border:             0px none #000;
    border-top:         1px solid #000;
    clear:              both;

if __name__ == "__main__":
    nume_fisier = "links.txt"
    try:
        with open(nume_fisier, "r") as f:
            lines = f.readlines()
            links = [line.strip() for line in lines if line.strip() and not line.strip().startswith("#")]
            
        while True:
            os.system('clear')  # Curăță ecranul terminalului
            for idx, line in enumerate(links, start=1):
                print(f"{idx}. {line}")
            
            alegere_str = input("Selectează numărul link-ului pe care dorești să-l deschizi (0 pentru ieșire): ")
            
            try:
                alegere = int(alegere_str)
                
                if alegere == 0:
                    print("La revedere!")
                    break
                elif alegere >= 1 and alegere <= len(links):
                    line_ales = links[alegere - 1]
                    link_ales = extrage_link(line_ales)
                    if link_ales.startswith("https://www.youtube.com/"):
                        print("Prelucrez feed YouTube...")
                        prelucreaza_feed_youtube(link_ales)
                    else:
                        print("Prelucrez feed RSS...")
                        prelucreaza_feed_rss(link_ales)
                else:
                    print("Alegere invalidă.")
            except ValueError:
                print("Te rog introdu un număr valid.")
    except FileNotFoundError:
        print("Fișierul nu a fost găsit.")
}

kbd {
    padding:            0.05em 0.2em 0.05em 0.2em;
    border-width:       medium;
    border-style:       outset;
    text-align:         center;
    font-size:          smaller;
    background-image:   linear-gradient(to right, #bbb, #eee);
}


a:link {
  color: #1174b0;
}

a:visited {
  color: #1174b0;
}

a:hover {
  color: #1174b0;
}

a:active {
  color: #1174b0;
}

/* This is so I can use {color=red} in markdown */
[color="red"]    { color: red; }
[color="green"]  { color: green; }
[color="blue"]   { color: blue; }
[color="yellow"] { color: yellow; }
[color="white"]  { color: white; }
[color="black"]  { color: black; }
